version: "3"

services:

  dagit:
    build:
      context: ./c3d3
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      AWS_ACCESS_KEY_ID: 
      AWS_SECRET_ACCESS_KEY:
      S3_BUCKET:
      S3_BACKEND_URL:
    env_file:
      - c3d3/.env
    command: "dagit -w workspace.yaml -h 0.0.0.0 -p 3000"
    depends_on:
      - postgres
    restart: always
    networks:
      - c3d3

  daemon:
    build:
      context: ./c3d3
      dockerfile: Dockerfile
    env_file:
      - c3d3/.env
    environment:
      CELERY_BROKER_URL: 'pyamqp://rabbitmq:rabbitmq@0.0.0.0:5672/dagster'
      AWS_ACCESS_KEY_ID: 
      AWS_SECRET_ACCESS_KEY:
      S3_BUCKET:
      S3_BACKEND_URL:
    command: "dagster-daemon run -w workspace.yaml"
    depends_on:
      - postgres
    restart: always
    networks:
      - c3d3

  postgres:
    image: postgres:13
    environment:
      POSTGRES_HOST: 0.0.0.0
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      retries: 5
    restart: always
    ports:
      - '5435:5432'
    volumes:
      - ./postgres:/var/lib/postgresql/data
    networks:
      - c3d3

  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    networks:
      - c3d3
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq/
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
      RABBITMQ_DEFAULT_VHOST: dagster
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit disk_free_limit 2147483648 log_levels [{connection, error}, {default, error}]
    healthcheck:
      test: [ "CMD", "nc", "-z", "0.0.0.0", "5672" ]
      interval: 5s
      timeout: 15s
      retries: 3

  flower:
    image: mher/flower:1.2.0
    ports:
      - '5555:5555'
    environment:
      CELERY_BROKER_URL: 'pyamqp://rabbitmq:rabbitmq@0.0.0.0:5672/dagster'
      FLOWER_PORT: 5555
    networks:
      - c3d3
    depends_on:
      - rabbitmq
    restart: always

  minio:
    image: minio/minio:latest
    restart: always
    ports:
      - '9000:9000'
      - '9090:9090'
    volumes:
      - ./minio:/data
    environment:
      MINIO_ROOT_USER: minio-minio
      MINIO_ROOT_PASSWORD: minio-minio
    env_file:
      - c3d3/.env
    command: 'server /data --console-address ":9090"'
    networks:
      - c3d3

  worker:
    build:
      context: ./c3d3
      dockerfile: Dockerfile
    entrypoint: [ "dagster-celery", "worker", "start", "--loglevel=info", "-A", "dagster_celery.app", "-y", "celery.yaml" ]
    restart: always
    environment:
      CELERY_BROKER_URL: 'pyamqp://rabbitmq:rabbitmq@0.0.0.0:5672/dagster'
      AWS_ACCESS_KEY_ID: 
      AWS_SECRET_ACCESS_KEY:
      S3_BUCKET:
      S3_BACKEND_URL:
    ports:
      - '4000:4000'
    env_file:
      - c3d3/.env
    networks:
      - c3d3

networks:
  c3d3:
